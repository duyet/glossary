name: Build & Test & Push

on:
  schedule:
    - cron: "0 10 * * *"
  push:
    branches:
      - master
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

jobs:
  tests:
    name: test ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
          - target: x86_64-unknown-linux-musl
          - target: x86_64-apple-darwin
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v1

      - name: Rust Test
        run: |
          sudo apt-get install -y gcc-mingw-w64 mingw-w64 llvm-dev libclang-dev clang libxml2-dev libz-dev
          cat > /home/runner/.cargo/config.toml << EOF
          [target.x86_64-unknown-linux-musl]
          linker = "x86_64-linux-musl-gcc"
          [target.x86_64-apple-darwin]
          linker = "x86_64-apple-darwin14-clang"
          ar = "x86_64-apple-darwin14-ar"
          EOF
          export TEST_DATABASE_URL=postgres://postgres:postgres@localhost 
          cargo test --verbose --release --target ${{ matrix.target }}

  build:
    name: build and push docker
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v1

      - name: Rust Build
        run: cargo build --verbose

      - name: Rust tests
        run: TEST_DATABASE_URL=postgres://postgres:postgres@localhost cargo test --verbose

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/duyet/glossary
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
